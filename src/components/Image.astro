---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  className?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  className = '',
  priority = false
} = Astro.props;

// Generate WebP version path
const getWebPSrc = (originalSrc: string) => {
  const lastDotIndex = originalSrc.lastIndexOf('.');
  if (lastDotIndex === -1) return originalSrc;
  return originalSrc.substring(0, lastDotIndex) + '.webp';
};

const webpSrc = getWebPSrc(src);
const loadingAttr = priority ? 'eager' : loading;
---

<picture class={`image-wrapper ${className}`}>
  <!-- WebP source for modern browsers -->
  <source srcset={webpSrc} type="image/webp" />
  
  <!-- Fallback for older browsers -->
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loadingAttr}
    decoding="async"
    class="img-fluid"
  />
</picture>

<style>
  .image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }
  
  .image-wrapper img {
    width: 100%;
    height: auto;
    transition: opacity 0.3s ease;
  }
  
  .image-wrapper img[loading="lazy"] {
    opacity: 0;
    filter: blur(5px);
    transition: opacity 0.3s ease, filter 0.3s ease;
  }
  
  .image-wrapper img[loading="lazy"].loaded {
    opacity: 1;
    filter: blur(0);
  }
  
  .img-fluid {
    max-width: 100%;
    height: auto;
  }
</style>

<script>
  // Lazy loading enhancement
  document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('img[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.classList.add('loaded');
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });
      
      images.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers without IntersectionObserver
      images.forEach(img => {
        img.classList.add('loaded');
      });
    }
  });
</script>
