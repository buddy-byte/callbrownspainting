---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
  className?: string;
  sizes?: string;
  quality?: number;
  placeholder?: 'blur' | 'empty';
  blurDataURL?: string;
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  priority = false,
  className = '',
  sizes = '100vw',
  quality = 80,
  placeholder = 'empty',
  blurDataURL
} = Astro.props;

// Generate WebP version path
const getWebPSrc = (originalSrc: string) => {
  const lastDotIndex = originalSrc.lastIndexOf('.');
  if (lastDotIndex === -1) return originalSrc;
  return originalSrc.substring(0, lastDotIndex) + '.webp';
};

// Generate responsive srcset for different sizes
const generateSrcSet = (baseSrc: string, webpSrc: string) => {
  const sizes = [
    { width: 300, suffix: '_thumbnail' },
    { width: 600, suffix: '_small' },
    { width: 1200, suffix: '_medium' },
    { width: 1920, suffix: '_large' }
  ];
  
  const srcSet = sizes.map(size => {
    const webpPath = webpSrc.replace('.webp', `${size.suffix}.webp`);
    return `${webpPath} ${size.width}w`;
  }).join(', ');
  
  return srcSet;
};

const webpSrc = getWebPSrc(src);
const srcSet = generateSrcSet(src, webpSrc);
const loadingAttr = priority ? 'eager' : loading;
---

<picture class={`optimized-image ${className}`}>
  <!-- WebP source for modern browsers -->
  <source 
    srcset={srcSet}
    sizes={sizes}
    type="image/webp"
  />
  
  <!-- Fallback for older browsers -->
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loadingAttr}
    decoding="async"
    class={`img-fluid ${className}`}
    style={placeholder === 'blur' && blurDataURL ? `background-image: url('${blurDataURL}'); background-size: cover; background-position: center;` : ''}
  />
</picture>

<style>
  .optimized-image {
    display: block;
    position: relative;
    overflow: hidden;
  }
  
  .optimized-image img {
    width: 100%;
    height: auto;
    transition: opacity 0.3s ease;
  }
  
  .optimized-image img[loading="lazy"] {
    opacity: 0;
  }
  
  .optimized-image img[loading="lazy"].loaded {
    opacity: 1;
  }
  
  /* Lazy loading styles */
  .optimized-image img[loading="lazy"] {
    filter: blur(5px);
    transition: filter 0.3s ease;
  }
  
  .optimized-image img[loading="lazy"].loaded {
    filter: blur(0);
  }
  
  /* Responsive image container */
  .img-fluid {
    max-width: 100%;
    height: auto;
  }
  
  /* Aspect ratio containers */
  .optimized-image.aspect-16-9 {
    aspect-ratio: 16 / 9;
  }
  
  .optimized-image.aspect-4-3 {
    aspect-ratio: 4 / 3;
  }
  
  .optimized-image.aspect-1-1 {
    aspect-ratio: 1 / 1;
  }
  
  .optimized-image.aspect-16-9 img,
  .optimized-image.aspect-4-3 img,
  .optimized-image.aspect-1-1 img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>

<script>
  // Lazy loading enhancement
  document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('img[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.classList.add('loaded');
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });
      
      images.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers without IntersectionObserver
      images.forEach(img => {
        img.classList.add('loaded');
      });
    }
  });
</script>
